import { Component, createElement } from 'react';
import { Provider } from 'react-redux';
import { createHoc } from 'react-common-kit';
import createAppState from './appState';

/**
 * @param {object} config see appState's param
 * @returns {function}
 */
export default function createApp({ plugins, loaders, ...originConfig }) {
  let config = originConfig;
  if (plugins) {
    plugins.forEach(plugin => {
      config = plugin(config);
    });
  }
  const isSsrEnv = typeof location !== 'object';
  const {
    // autogenerated
    // withRouter
    _enableRouter = false,
    _createRouterHistory,
    _ConnectedRouter: ConnectedRouter,
    routerConfig,
    // withPersist
    _enablePersist = false,
    _PersistGate: PersistGate,
    // withImmutable
  } = config;
  return createHoc(
    SubAppComponent =>
      class WithAppState extends Component {
        // https://redux.js.org/docs/recipes/IsolatingSubapps.html
        // https://gist.github.com/gaearon/eeee2f619620ab7b55673a4ee2bf8400
        constructor(props) {
          super(props);
          const {
            appConfig = {},
            baseUrl,
            reportAppState,
            appState = {},
          } = props;
          let { store, persistor, routerHistory } = appState;
          if (!store) {
            routerHistory =
              _enableRouter &&
              _createRouterHistory({
                basename: routerConfig.basename || baseUrl,
              });
            const dynamicConfig = Object.assign(
              { _routerHistory: routerHistory },
              config,
              appConfig,
            );
            ({ store, persistor } = createAppState(dynamicConfig));
          }
          Object.assign(this, {
            store,
            persistor,
            routerHistory,
          });
          if (isSsrEnv && !appState.store && reportAppState) {
            reportAppState({
              store,
              routerHistory,
              loaders,
            });
          }
        }

        resetLoader(key) {
          this.setState(prevState => {
            const newLoaders = prevState.loaders.slice();
            newLoaders[key] = null;
            return { loaders: newLoaders };
          });
        }

        render() {
          const { store, persistor } = this;
          const {
            StaticRouter,
            currentUrl,
            routerContext,
            baseUrl,
            ...passThroughProps
          } = this.props;
          let root = createElement(SubAppComponent, {
            ...passThroughProps,
          });
          if (_enableRouter) {
            root = createElement(
              isSsrEnv ? StaticRouter : ConnectedRouter,

              isSsrEnv
                ? {
                    basename: routerConfig.basename || baseUrl,
                    location: currentUrl,
                    context: routerContext,
                  }
                : {
                    history: this.routerHistory,
                    ...routerConfig,
                  },
              root,
            );
          }
          // https://github.com/rt2zz/redux-persist#usage
          if (!isSsrEnv && _enablePersist) {
            root = createElement(
              PersistGate,
              { persistor, loading: null },
              root,
            );
          }
          return createElement(
            // https://redux.js.org/docs/basics/UsageWithReact.html#passing-the-store
            Provider,
            { store },
            // https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux#usage
            root,
          );
        }
      },
  );
}
